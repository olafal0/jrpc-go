// Code generated by jrpc. DO NOT EDIT.

// Package handlers is an auto-generated package providing HTTP handler
// functions that wrap handlers in the example package.
package handlers

import (
	"context"
	"encoding/json"
	"example"
	"fmt"
	"net/http"
)

type JSONCaller func(ctx context.Context, req json.RawMessage) (json.RawMessage, error)

func (j JSONCaller) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	d := json.NewDecoder(r.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		http.Error(w, "the json request could not be decoded", http.StatusBadRequest)
		return
	}

	resp, err := j(r.Context(), rawReqBody)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Write(resp)
}

func HTTPHandler(recv *example.Service) http.Handler {
	mux := http.NewServeMux()
	mux.Handle("/CreateUser", ServiceCreateUserCaller(recv))
	mux.Handle("/GetUser", ServiceGetUserCaller(recv))
	return mux
}

type RPCCaller func(method string) (JSONCaller, error)

func Caller(recv *example.Service) RPCCaller {
	methods := map[string]JSONCaller{
		"CreateUser": ServiceCreateUserCaller(recv),
		"GetUser":    ServiceGetUserCaller(recv),
	}
	return func(method string) (JSONCaller, error) {
		caller, ok := methods[method]
		if !ok {
			return nil, fmt.Errorf("unknown method %s", method)
		}
		return caller, nil
	}
}

func ServiceCreateUserCaller(recv *example.Service) JSONCaller {
	return func(ctx context.Context, req json.RawMessage) (json.RawMessage, error) {
		var input string
		err := json.Unmarshal(req, &input)
		if err != nil {
			return nil, err
		}

		resp, err := recv.CreateUser(ctx, input)
		if err != nil {
			return nil, err
		}

		respBytes, err := json.Marshal(resp)
		if err != nil {
			return nil, err
		}
		return respBytes, nil
	}
}

func ServiceGetUserCaller(recv *example.Service) JSONCaller {
	return func(ctx context.Context, req json.RawMessage) (json.RawMessage, error) {
		var input *http.Request
		err := json.Unmarshal(req, &input)
		if err != nil {
			return nil, err
		}

		resp, err := recv.GetUser(ctx, input)
		if err != nil {
			return nil, err
		}

		respBytes, err := json.Marshal(resp)
		if err != nil {
			return nil, err
		}
		return respBytes, nil
	}
}
